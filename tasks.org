#+TITLE: Home tasks
#+FILETAGS: #home infra configuration dotfiles


* DONE Choose the repository to use
CLOSED: [2020-03-13 Fri 19:17]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-13 Fri 19:17]
:END:
Heading towards using ~home~ or a new ~dotfiles~ repository ðŸ˜…

*Decision*: Using ~home~ and whenever I feel, renaming to ~dotfiles~ (so that we get the
redirection)

* DONE Make it clear what that repository supports
CLOSED: [2020-03-13 Fri 19:21]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-13 Fri 19:21]
:END:

- NixOS
- Nix with home-manager
- Ansible for Fedora (?)

* DONE Organize the repository
CLOSED: [2020-03-14 Sat 14:47]
:LOGBOOK:
- State "DONE"       from "STARTED"    [2020-03-14 Sat 14:47]
CLOCK: [2020-03-14 Sat 14:35]--[2020-03-14 Sat 14:50] =>  0:15
CLOCK: [2020-03-14 Sat 10:30]--[2020-03-14 Sat 14:30] =>  4:00
CLOCK: [2020-03-13 Fri 19:3g0]--[2020-03-13 Fri 21:30] =>  2:00
:END:

Documented on the repository itself.

* DONE Import repositories
CLOSED: [2020-03-14 Sat 15:10]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-14 Sat 15:10]
CLOCK: [2020-03-14 Sat 14:47]--[2020-03-14 Sat 15:10] =>  0:23
:END:

Using =git subtree=

** DONE gh:vdemeester/nixos-configuration
CLOSED: [2020-03-14 Sat 15:10]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-14 Sat 15:10]
:END:

Made sure my local working directory was up-to-date.

#+begin_src emacs-lisp
git subtree add --prefix=tmp/nixos-configuration \
    ~/src/github.com/vdemeester/nixos-configuration/.git master
#+end_src


** DONE gh:vdemeester/emacs-config
CLOSED: [2020-03-14 Sat 15:10]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-14 Sat 15:10]
:END:

Made sure my local working directory was up-to-date.

#+begin_src bash
git subtree add --prefix=tmp/emacs-config ~/.emacs.d/.git master
#+end_src


* DONE What is the main repository ?
CLOSED: [2020-03-29 Sun 18:35]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-03-29 Sun 18:35]
:END:

Choices are:

- +github.com+
- gitlab.com
- git.sr.ht (mirrored)

* DONE Where to put what ?
CLOSED: [2020-04-14 Tue 21:25]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-14 Tue 21:25]
:END:

Base on [[https://git.tazj.in/about][tazjin's personal monorepo]], some tooling only configuration, like =emacs= could go
into a ~tools/{tool}~ folder.

- ~tools/emacs~ for the emacs configurations
- â€¦

* DONE Bootstrap script
CLOSED: [2020-04-29 Wed 11:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-29 Wed 11:37]
:END:

- Detect the host system
  + NixOS livecd/install (~nixos-configuration~)
  + NixOS installed, run as user (~home-manager~)
  + Fedora (~nixpkgs~ to install, ansible, â€¦)

The main problem I can see still is : how do I bootstrap NixOS and how do I keep it
up-to-date.

- Should it link itself to the home at some point ?
- Should it be read-only (~/etc/nixos~) and only get updates from the main repository ?
  + This is 95% possible if I have good reproducibility, easily test my /shit/ using a VM
    or something (and quickly too)

* DONE Auto-detect the hostname (for home-manager, â€¦)
CLOSED: [2020-04-14 Tue 21:25]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-14 Tue 21:25]
:END:

support both ~hostname~ commands (~home-manager~) and a file (~/etc/nixos~)


* DONE Auto-detect ~home-manager~ vs ~nixos~
CLOSED: [2020-04-14 Tue 21:26]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-14 Tue 21:26]
:END:

mainly for modules that could be used in both. This could be done manually (aka in the
main configuration)

Using sudo ðŸ˜Ž

* DONE Update submodules overlays
CLOSED: [2020-04-28 Tue 23:32]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-28 Tue 23:32]
:END:

Using a ~make~. Should it be submodules *or* subtree ?
- submodule makes the repo smaller
- subtree makes the repo reproductible

Submodule is easy to manage, especially in magit too

* DONE Install script
CLOSED: [2020-04-30 Thu 00:56]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-30 Thu 00:56]
:END:

* DONE [#A] Move =tmp/nixos-configuration= to root
CLOSED: [2020-04-30 Thu 02:11]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-04-30 Thu 02:11]
:END:

Have some variable to let modules know if they are from home-manager or not.
Maybe I can try on an test module

First step is to import =machine/{hostname}.nixos.nix=.
For modules, it's a little bit tricker, but the first step is to have a separate nixos
module list.

* DONE update kerkouane to nixos 20.03
CLOSED: [2020-05-06 Wed 05:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-06 Wed 05:37]
:END:

* DONE Find a way to detect if the module is called from h-m or nixos
CLOSED: [2020-05-06 Wed 05:37]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-06 Wed 05:37]
:END:

After importing modules, import a file conditionnally (home & nixos) that set a config to
true or false. This would also allow to support more things, like specifics for ubunt,
fedora, â€¦

* DONE Migrate nur-package here
CLOSED: [2020-05-06 Wed 09:51]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-06 Wed 09:51]
:END:

- [X] Have a CI setup for it (using sr.ht)
  + Automate cachix push (nixos + nixos-unstable + nixpkgs-unstable + â€¦)
  + =curl= on nur-community in case of nur file changed (and only for it)
- [X] Update nur-community

* DONE [#A] Update auto-update service
CLOSED: [2020-05-09 Sat 22:51]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-09 Sat 22:51]
:END:

Make it simpler
- auto-update simple
- a nightly git pull --rebase â€¦ as *user*

* DONE [#A] Add =.githooks= support
CLOSED: [2020-05-09 Sat 15:08]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-09 Sat 15:08]
:END:

* DONE =ci.nix= with build.sr.ht
CLOSED: [2020-05-06 Wed 10:13]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-06 Wed 10:13]
:END:

* DONE [#B] cron-job to schedule a build at build.sr.ht ðŸ‘¼
CLOSED: [2020-05-10 Sun 13:55]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-10 Sun 13:55]
:END:

Daily or weekly build

* TODO [#A] Pin channel versions

Instead of relying on =nix-channel=, this should pin the version of all channel required
(nixos, nixos-unstable, nixpkgs, nixpkgs-unstable, home-manager, nur, â€¦).

- This would allow more reproducibility on all the machines.
- This would also allow to create a bot to automatically update those channelsâ€¦
  + â€¦ and run smoke tests using qemu for the configuration (automatically too)
- This would allow to cache pkgs more efficientlyâ€¦
  + â€¦ as the ci could build against multiple /channels/
  + â€¦ as the machines would have the exact same /channels/ as the ci
- This would allow to run =nixos-rebuild switch= as a user without the mess of channels

#+begin_src nix
nix.nixPath = [ "nixpkgs=${sources.nixos}" ];
#+end_src

#+begin_src bash
nixos-rebuild dry-build -I nixpkgs=$(nix eval --raw '(import nix/sources.nix).nixos.outPath') -I nixos-config=/etc/nixos/configuration.nix
#+end_src

** TODO self-contained configuration

- Pin different channels in the configuration (?)
- Run the configuration against multiple channels (?)
- Use =nix.path= or Ã -la-tazjin or [[https://github.com/nmattia/niv][=niv=]] (which is close to tazjin's approach)

** TODO =ci.nix= build on multiple channels
:PROPERTIES:
:CREATED:[2020-05-05 Tue 12:45]
:END:

Automatic =nix-build . | cachix push shortbrain=, on nixos-unstable and nixpkgs-unstable too.

From: [[eshell:*eshell nur-packages*:cd /home/vincent/src/github.com/vdemeester/nur-packages][cd /home/vincent/src/github.com/vdemeester/nur-packages]]

* DONE [#A] Decide on home-manager for NixOS
CLOSED: [2020-05-21 Thu 13:56]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-21 Thu 13:56]
:END:

- Should we use home-manager as a nixos module when the host is NixOS ?
- Experiment with that on a clean setup (VM, â€¦)
- If we pin channels, I feel it make sense :)

As we are going to pin channel and use our =NIX_PATH= (based on =niv= files ; and later
most likely *flake*), we can safely assume we should be able to manage home-manager
through the nixos module. If I can use =nixos-rebuild â€¦= as a user, it's even better.

* TODO [#A] Where should be the cloned ?

That's a real interesting question.
The next question is then, what do we do with the existing setup ?
- link =./tmp/emacs= in =~/.emacs.d/= ?
- have a tool to help migrate (aka backup + link and later do something else) ?

So latest status on this.
- =/etc/home= with user rights might make the most sense. Why ?
  + At install time, I don't have a user yet
  + In all system, I can, in some way,

How does this work with =~/src/www= ? The main problem might be the =git clone= but I
think it's ok to use sudo for this.

The real question is :
- =/etc/home= everywhere ? orâ€¦
- =~/src/home= on fedora/ubuntu and =/etc/nixos= on nixos

It could also be in =/etc/nixos= if it is writable for the user (=vincent= in most case)

* TODO [#B] Create a custom iso for easier insteall
* TODO [#B] nur-package automatic -git package updates
:PROPERTIES:
:CREATED:[2020-04-30 Thu 20:58]
:END:

For packages that track master, create a =-git= version and have an automate that is able
to update those daily (or weekly ?), using =nix-update= (and maybe more for modSha256)

** TODO [[https://berfr.me/posts/watch-diff/][watch-diff: Watch command output and get notified on changes | berfr blog]]
[2020-05-07 Thu 16:42]



** TODO [[https://www.nmattia.com/posts/2019-09-10-autoupdate.html][Nicolas Mattia â€“ Triggered CI Builds: Automatically Update your Project's Dependencies]]
[2019-10-15 Tue 08:24]

* TODO [#B] =qemu=/=kvm= setup to tests things

- start a system with nixos iso (cache and download)
- start a system with nixos pre-installed (cached)
- start a system with fedora pre-installed (cached)

- https://github.com/Xe/nixos-configs
- https://rycee.gitlab.io/home-manager/
- [[https://www.tomas.io/articles/try-fedora][Try fedora | tomas.io]]

Can be using =virsh= and =libvirt=. Maybe the best thing will be to use the test
capabilities of nixos itself.

* TODO [#B] bootstrap.nix (and install.nix)

Reduce the sh script to the minimum and use =nix-shell= with a =.nix= file as much as
possible.
To run the install script from a NixOS livecd, =nix-shell= can be used, same in bootstrap
as soon as we have installed nix.

* TODO De-duplicate modules

* TODO More defaults in configuration

In [[https://hugoreeves.com/posts/2019/nix-home/][Your home in Nix (dotfile management) - Hugo Reeves]] he defines some defaults (in nix
even) and allow his modules to overwrite the defaults.

This is very good because it allows to customize some small parts of the configuration
only for specific host â€” this will reduce duplication.

* TODO make modules-list automatic

Look at tazjin and other configurations, we can read tree and load/import all the nix
files. This will simplify =module-list.nix= and easy my pain.

* TODO Manage firefox in home-manager

- See [[https://cmacr.ae/post/2020-05-09-managing-firefox-on-macos-with-nix/][Managing Firefox on macOS with Nix - Calum MacRae]]
- Create a post for it (or put it in the docs)

** TODO [[https://rakhim.org/2018/10/improve-performance-of-firefox-on-macos/][Make Firefox faster and nicer on macOS - Rakhim.org]]        :firefox:
:LOGBOOK:
- State "DONE"       from "TODO"       [2019-04-25 Thu 18:37]
:END:

Really useful tip, I should do the same with my own (aka an ode to firefox)
* TODO Build and use more NixOS container

See https://github.com/google/nixery (layered, )â€¦

* TODO Better wireguard support

- support for creating key
- support for importing keys

* TODO Handle machines.nix better (somehow?)

I should not need to have =with import ../assets/machines.nix= each time I need to access
attributes from it. I need to load it as the other files instead.

This means using types and the options/config system

* TODO Makefile executable from anywhere

aka ~make -C ~/.config/nixpkgs~ should work

* TODO Zsh configuration
For zsh on nixos:
- [ ] use emacs keybinding
- [ ] completion
- [ ] take some stuff from ~home~ configuration

* TODO Have a ~emacs.nix~ aware config                          :nixos:emacs:
:PROPERTIES:
:CREATED:[2019-03-16 Sat 11:57]
:END:

1. Can be cloned, exec(d) and run as is (using ~nix~)
2. Can be run without ~nix~ (see ~bauer~)
3. Can put build and pushed to nix, making updates (~home-manager~) less verbose and long.

From: [[file:~/desktop/org/technical/tekton-dev.org::*Environments][Environments]]
* TODO better overlays

- [ ] =default.nix= to import others
- [ ] =pkgs= and overlay smooth integration (aka no prefix =my=)

* TODO virtualization.buildkit options

- [ ] with containerd, default is to use runc only

* TODO pkgs: support stdenv.isLinux, â€¦

stdenv.lib.optionals stdenv.isLinux

* TODO =private= folder for nix (instead of =assets=)
* TODO add crc profile on nixos

Mainy for the dnsmasq configuration, â€¦
* TODO [#B] Emacs shell environment                           :emacs:project:

** TODO Enhance eshell

- Better prompt
- More functions
- Better completion (pcomplete, â€¦)

** TODO More vterm

Make vterm more useful

** TODO Less zsh-only wonders

more generic stuff
* TODO [#B] Nix desktop VM                                    :nixos:project:

https://github.com/Xe/nixos-configs
https://rycee.gitlab.io/home-manager/

** TODO Specific simple configuration (bankruptcy)

** TODO Try gnome3 ?
* DONE [#B] kubernix setup project                         :nixos:kubernetes:
CLOSED: [2020-05-18 Mon 19:46]
:LOGBOOK:
- State "DONE"       from "TODO"       [2020-05-18 Mon 19:46]
- New deadline from "[2020-05-08 Fri]" on [2020-05-11 Mon 11:18]
- New deadline from "[2020-05-02 Sat]" on [2020-05-03 Sun 13:20]
- New deadline from "[2020-04-26 Sun]" on [2020-04-27 Mon 09:55]
- New deadline from "[2020-04-24 Fri]" on [2020-04-24 Fri 17:49]
- New deadline from "[2020-04-17 Fri]" on [2020-04-20 Mon 11:45]
- New deadline from "[2020-04-11 Sat]" on [2020-04-13 Mon 16:06]
- New deadline from "[2020-04-04 Sat]" on [2020-04-05 Sun 18:13]
- New deadline from "[2020-04-03 Fri]" on [2020-04-03 Fri 07:43]
- New deadline from "[2020-03-29 Sun]" on [2020-03-29 Sun 17:34]
- New deadline from "[2020-03-27 Fri]" on [2020-03-27 Fri 17:28]
- New deadline from "[2020-03-21 Sat]" on [2020-03-23 Mon 15:07]
:END:
:PROPERTIES:
:CREATED:[2020-03-18 Wed 10:31]
:END:

1. use a tmux for this :)
   https://bytes.zone/posts/tmux-session/
2. package script in ~home~
3. have a quick switch to target it (zsh, emacs)
   Done using the same as the rest
4. write an article about it, based on the project

What is the flow I want ?

- A simple command (=yak=)
- A profile (like =tektoncd=, â€¦)
- A way to list the kubernix profile and their status

Use http://tmuxp.git-pull.com/en/latest/ or
