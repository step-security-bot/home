#+title: My Emacs System
#+SUBTITLE: A attempt to document my emacs setup 🙃
#+ROAM_ALIAS: "emacs" "Emacs" "GNU/Emacs" "gnu/emacs"

Emacs is the best editor possible, at least for me, especially with the killer [[file:org_mode.org][org-mode]]
module.

I do all in a lot in Emacs:
- task and calendar management using [[file:org_mode.org][org-mode]].
- mail using [[file:gnus.org][gnus]].
- programming in different languages ([[file:elisp.org][elisp]], [[file:go.org][go]], [[file:bash.org][bash]], …)
- interactive shell using either [[file:eshell.org][eshell]] or [[file:vterm.org][vterm]].

This is my attempt to document my Emacs setup, inspired by [[https://writequit.org/eos/eos.html][The Emacs Operating System
(EOS)]] or [[http://doc.rix.si/cce/cce.html][Complete Computing Environment]] and other litterate configurations, see
[[id:575a424a-8121-40d9-85bd-ac4975818a8d][Inspirations]]. In a gist, this is the litterate version of the [[file:config_configurations.org][configurations]] available in
my [[https://git.sr.ht/~vdemeester/home][monorepo]].

#+TOC: headlines 1

* What is this

The present document, referred to in the source code version as =emacs.org=, contains the
bulk of my configurations for GNU Emacs. It is designed using principles of "literate
programming": a combination of ordinary language and inline code blocks. Emacs knows how
to parse this file properly so as to evaluate only the elisp ("Emacs Lisp") included
herein. The rest is for humans to make sense of my additions and their underlying
rationale.

#+BEGIN_QUOTE
Literate programming allows us to be more expressive and deliberate. Not only we can use
typography to its maximum potential, but can also employ techniques such as internal links
between sections. This makes the end product much better for end users, than a terse
script.
#+END_QUOTE

I switched back and forth on using =org-mode= and literate programming, so why re-using
it. First, I think I went for it the wrong way the first time. I copied part of the
configuration from elsewhere, sometimes without really needing what I was copying. for
some reason I think this is a common pattern when configuring Emacs. You start by using a
distribution (Doom Emacs, Spacemacs, …) or by copying configuration from all over the
place. Slowly but surely you realize this was a mistake as you didn't learn anything, so
you *reboot* your configuration.


* Why using GNU/Emacs ?

This is a question I thought I needed to answer, or at least, document why I am choosing
GNU/Emacs as my primary editor. [[https://protesilaos.com/][Protesilaos Stavrou]] has a [[https://protesilaos.com/codelog/2019-12-20-vlog-switch-emacs/][video]] about it, really
interesting.

There is a lot of reasons but for me, the following are the main ones:
- *Open Source*: this is a "of course", but my editor _has to be_ open-sourced. This seems
  to be the norm these days anyway (and for a long time, with =vim=).
- *Lightweight*: the editor should be relatively lightweight. I don't want a full browser
  loaded to edit files, and I want to be able to run it in a terminal, on a server. =vim=
  can do that (and sometimes, =vim= or =vi= is enough 👼).
- *Extensible*: to be honest, this is the most important reason. I want to be able to
  extend my editor as much as possible.

GNU/Emacs checks all the boxes for me. Even though GNU/Emacs is probably not as
lightweight as =vim=, it is definitely lightweight compared to all the Electron-based
editors (vscode, …). It is of course open-source, and since ages (almost as old as I am
😅). And best of all, GNU/Emacs is extensible as you couldn't dream of. Emacs is a lisp
interpreter, and it is designed to be extended in order to meet the user's
needs. /Extensibility/ is the quintessential Emacs quality. You can modify any piece of
elisp /in real time/.

I'm also a huge fan of /text-based/ software, a.k.a. do whatever you can using text :
reading mails, news, organizing notes and todos, all can be done in text. And GNU/Emacs
shines at this. For emails and news, you've got Gnus built-in, for notes and todos, the
wonderful =org-mode= is the best thing on earth (seriously, this is the *one* mode that
made me switch from =vim=).

* Assumptions

I'll make a few assumption in the following document (that may or may not be true):

- [[https://nixos.org/nix/][~nix~]] is available, either from [[https://nixos.org][NixOS]] or via an install of nix. I'll try my best to
  support non-nix environment, but it's definitely not my current focus.
  + As I am making the assumption that ~nix~ is available, I am also making the assumption
    that all the library required are already present (in my [[https://github.com/vdemeester/home][~home~]], there is a file
    called [[https://github.com/vdemeester/home/blob/master/modules/profiles/emacs.nix][~emacs.nix~]] that encapsulate those dependencies). This is why, by default
    *use-package* doesn't use the =ensure= option in 99% of the configuration.
- Any function I wrote is going to be prefixed by ~vde/~ so that it doesn't conflicts with
  function that would have been defined elsewhere.
- Any function imported from another configuration, without any change, should be kept as
  is and/or prefixed by an unique id. I'll try to make sure to link to the configuration
  too.
* Keybinding
:PROPERTIES:
:ID:       5f74193a-03ed-4336-8746-fb1d514a5484
:END:

As it is detailed in each part of this configuration, I am trying to setup keybinding in a
/mnemonics/ way so it's easy to remember (and use). This is what [[https://www.spacemacs.org/][spacemacs]] does with evil
keybindings (aka vim-like keybindings). I am staying with the /standard/ emacs keybinding
as much as possible (as there is already some mnemonics in there).

There are countless jokes and comics on Emacs’s seemingly ridiculous keybindings. Good
laughs indeed, but at the end of day, it’s not incomprehensible. It has well-defined
conventions listed at [[https://www.gnu.org/software/emacs/manual/html%5Fnode/elisp/Key-Binding-Conventions.html][Emacs Key Bindings Convention]]. In summary, the general rules are:

+ =C-x= reserved for Emacs native essential keybindings: buffer, window, frame, file, directory, etc…
+ =C-c= reserved for user and major mode:
  - =C-c letter= reserved for user. =<F5>=-=<F9>= reserved for user.
  - =C-c C-letter= reserved for major mode.
+ Don’t rebind =C-g=, =C-h= and =ESC=.

To give a small example, most of my personal =org-mode= keybinding will start with =C-c
o=, as it is reserved for user, and =o= is for =org-mode=. For version control, it's gonna
be =C-c v=, for projects it's gonna be =C-c p=, etc…

| prefix  | "mode"                              |
|---------+-------------------------------------|
| <F1>    |                                     |
| <F2>    |                                     |
| <F3>    | /built-in/ Register macro(s)        |
| <F4>    | /built-in/ Plays macro(s)           |
| <F5>    | =revert-buffer=                     |
| <F6>    |                                     |
| <F7>    |                                     |
| <F8>    |                                     |
| <F9>    |                                     |
| <F10>   |                                     |
| <F11>   |                                     |
| <F12>   |                                     |
| =C-c b= | Bookmarks (=bookmark-plus=)         |
| =C-c h= | Help (=helpful=, …)                 |
| =C-c n= | Navigation (=avy=, …)               |
| =C-c o= | Org mode                            |
| =C-c p= | Projects (=projectile=, …)          |
| =C-c v= | Version control (=vc=, =magit=, …)  |
| =C-c w= | Window management (=ace-window=, …) |
| =C-x p= | Bookmarks (=bookmark-plus=, …)      |

This table is not complete and I don't intend to keep it complete here. Instead, there
should be a table like this on each configuration file to describe what this config brings
as keybinding.

See also:
- https://karl-voit.at/2018/07/08/emacs-key-bindings/
- https://www.masteringemacs.org/article/mastering-key-bindings-emacs
- http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/
* COPYING

Copyright (c) 2013-2020 Vincent Demeester <vincent@sbr.pm>

This file is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at
your option) any later version.

This file is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this file.  If not, see <http://www.gnu.org/licenses/>.
* Base settings
:PROPERTIES:
:header-args: :tangle ~/src/home/tools/emacs/init.el
:header-args+: :comments org
:END:

This section contains configurations that are needed prior to the setup of everything
else. Anything that needs to be configured first should be in there, this includes the
~init.el~ and ~early-init.el~ files content.

** Early initialization
:PROPERTIES:
:header-args: :tangle ~/src/home/tools/emacs/early-init.el
:header-args+: :comments org
:ID:       317fc8fd-1220-423d-8a45-497f951014ee
:END:

Starting with Emacs 27, an =early-init.el= file can be used to do early configuration
and optimization.

#+begin_quote
Emacs can now be configured using an early init file. The file is called ~early-init.el~,
in ~user-emacs-directory~. It is loaded very early in the startup process: before
graphical elements such as the tool bar are initialized, and before the package manager is
initialized. The primary purpose is to allow customizing how the package system is
initialized given that initialization now happens before loading the regular init file
(see below).

We recommend against putting any customizations in this file that don't need to be set up
before initializing installed add-on packages, because the early init file is read too
early into the startup process, and some important parts of the Emacs session, such as
'window-system' and other GUI features, are not yet set up, which could make some
customization fail to work.
#+end_quote

We can use this to our advantage and optimize the initial loading of emacs.

- Before Emacs 27, the init file was responsible for initializing the package manager by
  calling `package-initialize'.  Emacs 27 changed the default behavior: It now calls
  `package-initialize' before loading the init file.

  #+begin_src emacs-lisp
  (setq package-enable-at-startup nil)
  #+end_src

- Let's inhibit resizing the frame at early stage.

  #+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t)
  #+end_src

- I never use the /menu-bar/, or the /tool-bar/ or even the /scroll-bar/, so we can safely
  disable those very very early.

  #+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  #+end_src

- Finally we can try to avoid garbage collection at startup. The garbage collector can
  easily double startup time, so we suppress it at startup by turning up ~gc-cons-threshold~
  (and perhaps ~gc-cons-percentage~) temporarily.

  #+begin_src emacs-lisp
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)
  #+end_src

- Another small optimization concerns on =file-name-handler-alist= : on every .el and .elc
  file loaded during start up, it has to runs those regexps against the filename ; setting
  it to ~nil~ and after initialization finished put the value back make the initialization
  process quicker.

  #+begin_src emacs-lisp
  (defvar file-name-handler-alist-original file-name-handler-alist)
  (setq file-name-handler-alist nil)
  #+end_src

  However, it is important to reset it eventually. Not doing so will cause garbage
  collection freezes during long-term interactive use. Conversely, a ~gc-cons-threshold~
  that is too small will cause stuttering. This will be done at the end.

- It's also possible to put the theme *and* the font in =early-init.el= to speed the
  start.

  #+begin_src emacs-lisp
  (defvar contrib/after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")

  (defun contrib/run-after-load-theme-hook (&rest _)
    "Run `contrib/after-load-theme-hook'."
    (run-hooks 'contrib/after-load-theme-hook))

  (advice-add #'load-theme :after #'contrib/run-after-load-theme-hook)
  (require 'modus-operandi-theme)

  (defun vde/modus-operandi ()
    "Enable some Modus Operandi variables and load the theme.
  This is used internally by `vde/modus-themes-toggle'."
    (setq modus-operandi-theme-slanted-constructs t
          modus-operandi-theme-bold-constructs t
          modus-operandi-theme-subtle-diffs t
          modus-operandi-theme-rainbow-headings t
          modus-operandi-theme-section-headings nil
          modus-operandi-theme-scale-headings nil
          modus-operandi-theme-fringes 'subtle ; {nil,'subtle,'intense}
          modus-operandi-theme-mode-line '3d ; {nil,'3d,'moody}
          modus-operandi-theme-3d-modeline t
          modus-operandi-theme-faint-syntax nil
          modus-operandi-theme-intense-hl-line t
          modus-operandi-theme-intense-paren-match t
          modus-operandi-theme-prompts 'subtle ; {nil,'subtle,'intense}
          modus-operandi-theme-completions 'opinionated ; {nil,'moderate,'opinionated}
          modus-operandi-theme-diffs 'desaturated ; {nil,'desaturated,'fg-only}
          modus-operandi-theme-org-blocks 'greyscale ; {nil,'greyscale,'rainbow}
          modus-operandi-theme-variable-pitch-headings nil
          modus-operandi-theme-rainbow-headings t
          modus-operandi-theme-section-headings nil
          modus-operandi-theme-scale-headings t
          modus-operandi-theme-scale-1 1.05
          modus-operandi-theme-scale-2 1.1
          modus-operandi-theme-scale-3 1.15
          modus-operandi-theme-scale-4 1.2)
    (load-theme 'modus-operandi t))

  (defun vde/modus-operandi-custom ()
    "Customize modus-operandi theme"
    (if (member 'modus-operandi custom-enabled-themes)
        (modus-operandi-theme-with-color-variables ; this macro allows us to access the colour palette
          (custom-theme-set-faces
           'modus-operandi
           `(whitespace-tab ((,class (:background "#ffffff" :foreground "#cccccc"))))
           `(whitespace-space ((,class (:background "#ffffff" :foreground "#cccccc"))))
           `(whitespace-hspace ((,class (:background "#ffffff" :foreground "#cccccc"))))
           `(whitespace-newline ((,class (:background "#ffffff" :foreground "#cccccc"))))
           `(whitespace-indentation ((,class (:background "#ffffff" :foreground "#cccccc"))))
           ))))

  (add-hook 'contrib/after-load-theme-hook 'vde/modus-operandi-custom)
  (vde/modus-operandi)

  (defconst font-height 130
    "Default font-height to use.")
  (defconst font-family-mono "Ubuntu Mono"
    "Default monospace font-family to use.")
  (defconst font-family-sans "Ubuntu Sans"
    "Default sans font-family to use.")
  ;; Middle/Near East: שלום, السّلام عليكم
  (when (member "Noto Sans Arabic" (font-family-list))
    (set-fontset-font t 'arabic "Noto Sans Arabic"))
  (when (member "Noto Sans Hebrew" (font-family-list))
    (set-fontset-font t 'arabic "Noto Sans Hebrew"))
  ;; Africa: ሠላም
  (when (member "Noto Sans Ethiopic" (font-family-list))
    (set-fontset-font t 'ethiopic "Noto Sans Ethiopic"))

  ;; If font-family-mono or font-family-sans are not available, use the default Emacs face
  (when (member font-family-mono (font-family-list))
    (set-face-attribute 'default nil
                        :family font-family-mono
                        :height font-height)
    (set-face-attribute 'fixed-pitch nil
                        :family font-family-mono))
  (when (member font-family-sans (font-family-list))
    (set-face-attribute 'variable-pitch nil
                        :family font-family-sans
                        :weight 'regular))

  ;; Ignore X resources; its settings would be redundant with the other settings
  ;; in this file and can conflict with later config (particularly where the
  ;; cursor color is concerned).
  (advice-add #'x-apply-session-resources :override #'ignore)
  #+end_src

- Reseting garbage collection and file-name-handler values.

  #+begin_src emacs-lisp
  (add-hook 'after-init-hook
            `(lambda ()
               (setq gc-cons-threshold 67108864 ; 64mb
                     gc-cons-percentage 0.1
                     file-name-handler-alist file-name-handler-alist-original)
               (garbage-collect)) t)
  #+end_src

** Initialization
:PROPERTIES:
:ID:       a8fe7fee-d339-4854-9b75-c627adce788a
:END:

I am using the [[https://archive.casouri.cat/note/2020/painless-transition-to-portable-dumper/index.html][portable dump]] feature (/to speed things up/) *but* I want to also start
without =pdump=, so I need to take both cases into account.

#+begin_src emacs-lisp
(defvar sbr-dumped nil
  "non-nil when a dump file is loaded (because dump.el sets this variable).")

(defmacro sbr-if-dump (then &rest else)
  "Evaluate IF if running with a dump file, else evaluate ELSE."
  (declare (indent 1))
  `(if sbr-dumped
       ,then
     ,@else))

(sbr-if-dump
    (progn
      (global-font-lock-mode)
      (transient-mark-mode)
      (setq load-path sbr-dumped-load-path))
  ;; add load-path’s and load autoload files
  (package-initialize))
#+end_src

First thing first, let's define a =emacs-start-time= constant to be able to compute the
time Emacs took to start.

#+begin_src emacs-lisp
(defconst emacs-start-time (current-time))
#+end_src

My configuration do not support Emacs version lower than 26.

#+begin_src emacs-lisp
(let ((minver 26))
  (unless (>= emacs-major-version minver)
    (error "Your Emacs is too old -- this configuration requires v%s or higher" minver)))
#+end_src

One thing though, I am currently not necessarily running Emacs 27, so I am going to need
to have the same configuration in ~init.el~ for a little bit of time.

/Note: the lowest emacs version I wanna support is 26 (as of today, might evolve)/

#+begin_src emacs-lisp
;; load early-init.el before Emacs 27.0
(unless (>= emacs-major-version 27)
  (message "Early init: Emacs Version < 27.0")
  (load (expand-file-name "early-init.el" user-emacs-directory)))
#+end_src

We also want our configuration to be working the same on any computer, this means we want
to define every option by ourselves, not relying on default files (~default.el~) that
would be set by our distribution. This is where =inhibit-default-init= comes into play,
setting it to non-nil inhibit loading the ~default~ library.

We also want to inhibit some initial default start messages and screen. The default screen
will be as bare as possible.

#+begin_src emacs-lisp
(setq inhibit-default-init t)           ; Disable the site default settings

(setq inhibit-startup-message t
      inhibit-startup-screen t)
#+end_src

Let's also use =y= or =n= instead of =yes= and =no= when exiting Emacs.

#+begin_src emacs-lisp
(setq confirm-kill-emacs #'y-or-n-p)
#+end_src

One last piece to the puzzle is the default mode. Setting it to fundamental-mode means we
won't load any /heavy/ mode at startup (like =org-mode=). We also want this scratch buffer
to be empty, so let's set it as well

#+begin_src emacs-lisp
(setq initial-major-mode 'fundamental-mode
      initial-scratch-message nil)
#+end_src

** Unicode all the way
:PROPERTIES:
:ID:       e98f57c6-565a-4919-8ecb-f12e939dab03
:END:

By default, all my systems are configured and support =utf-8=, so let's just make it a
default in Emacs ; and handle special case on demand.

#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-selection-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+end_src

** Package management with =use-package=
:PROPERTIES:
:ID:       d2d75dfe-5085-4655-a81f-b6033f273f6f
:END:

=use-package= is a tool that streamlines the configuration of packages. It handles
everything from assigning key bindings, setting the value of customisation options,
writing hooks, declaring a package as a dependency for another, and so on.

#+begin_quote
The =use-package= macro allows you to isolate package configuration in your =.emacs= file
in a way that is both performance-oriented and, well, tidy.  I created it because I have
over 80 packages that I use in Emacs, and things were getting difficult to manage.  Yet
with this utility my total load time is around 2 seconds, with no loss of functionality!
#+end_quote

With =use-package= we can improve the start-up performance of Emacs in a few fairly simple
ways. Whenever a command is bound to a key it is configured to be loaded only once
invoked. Otherwise we can specify which functions should be autoloaded by means of the
=:commands= keyword.

We need to setup the emacs package system and install =use-package= if not present
already.

#+begin_src emacs-lisp
(require 'package)

(setq package-archives
      '(("melpa" . "http://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ("gnu" . "https://elpa.gnu.org/packages/")))

(setq package-archive-priorities
      '(("melpa" .  3)
        ("org" . 2)
        ("gnu" . 1)))

(require 'tls)

;; From https://github.com/hlissner/doom-emacs/blob/5dacbb7cb1c6ac246a9ccd15e6c4290def67757c/core/core-packages.el#L102
(setq gnutls-verify-error (not (getenv "INSECURE")) ; you shouldn't use this
      tls-checktrust gnutls-verify-error
      tls-program (list "gnutls-cli --x509cafile %t -p %p %h"
                        ;; compatibility fallbacks
                        "gnutls-cli -p %p %h"
                        "openssl s_client -connect %h:%p -no_ssl2 -no_ssl3 -ign_eof"))

;; Initialise the packages, avoiding a re-initialisation.
(unless (bound-and-true-p package--initialized)
  (setq package-enable-at-startup nil)
  (package-initialize))

(setq load-prefer-newer t)              ; Always load newer compiled files
(setq ad-redefinition-action 'accept)   ; Silence advice redefinition warnings

;; Init `delight'
(unless (package-installed-p 'delight)
  (package-refresh-contents)
  (package-install 'delight))

;; Configure `use-package' prior to loading it.
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src
** Early environment setup
:PROPERTIES:
:ID:       de0aad38-4742-4601-9fe6-c659ddc76bcb
:END:

I want to *force* ==SSH_AUTH_SOCK= in Emacs to use my gpg-agent.

#+begin_src emacs-lisp
(setenv "SSH_AUTH_SOCK" "/run/user/1000/gnupg/S.gpg-agent.ssh")
#+end_src

** =custom.el=
:PROPERTIES:
:ID:       afd8123e-1461-4f65-a9b7-c8195f1054c8
:END:

When you install a package or use the various customisation interfaces to tweak things to
your liking, Emacs will append a piece of elisp to your init file. I prefer to have that
stored in a separate file.

#+begin_src emacs-lisp
(defconst vde/custom-file (locate-user-emacs-file "custom.el")
  "File used to store settings from Customization UI.")

(use-package cus-edit
  :config
  (setq
   custom-file vde/custom-file
   custom-buffer-done-kill nil          ; Kill when existing
   custom-buffer-verbose-help nil       ; Remove redundant help text
   custom-unlispify-tag-names nil       ; Show me the real variable name
   custom-unlispify-menu-entries nil)
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load vde/custom-file 'no-error 'no-message))
#+end_src

** Remove built-in =org-mode=
:PROPERTIES:
:ID:       b2b2ac61-2ce6-4a86-b67c-88592bc0f111
:END:

I want to make sure I am using the installed version of =orgmode= (from my org
configuration) instead of the built-in one. To do that safely, let's remove the built-in
version out of the load path.

#+begin_src emacs-lisp
(require 'cl-seq)
(setq load-path
      (cl-remove-if
       (lambda (x)
         (string-match-p "org$" x))
       load-path))
#+end_src

** Loading configuration files
:PROPERTIES:
:ID:       ca8dd6f8-47c1-40bd-932b-baf3fb9e6407
:END:

This =org-mode= document /tangles/ into several files in different folders :
- ~config~ for my configuration
- ~lisp~ for imported code or library I've written and not yet published

I used to load them by hand in the ~init.el~ file, which is very cumbersome, so let's try
to automatically load them. I want to first load the file in the ~lisp~ folder as they are
potentially used by my configuration (in ~config~).

Let's define some functions that would do the job.

#+begin_src emacs-lisp
(defun vde/el-load-dir (dir)
  "Load el files from the given folder"
  (let ((files (directory-files dir nil "\.el$")))
    (while files
      (load-file (concat dir (pop files))))))

(defun vde/short-hostname ()
  "Return hostname in short (aka wakasu.local -> wakasu)"
  (string-match "[0-9A-Za-z-]+" system-name)
  (substring system-name (match-beginning 0) (match-end 0)))
#+end_src

Let's define some constants early, based on the system, and the environment, to be able to
use those later on to skip some package or change some configuration accordingly.

#+begin_src emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs ?")
(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")
(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")
(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")
(defconst *nix*
  (executable-find "nix")
  "Do we have nix? (aka are we running in NixOS or a system using nixpkgs)")
(defconst *rg*
  (executable-find "rg")
  "Do we have ripgrep?")
(defconst *gcc*
  (executable-find "gcc")
  "Do we have gcc?")
(defconst *git*
  (executable-find "git")
  "Do we have git?")

(defvar *sys/full*
  (member (vde/short-hostname) '("wakasu" "naruhodo")) ; "naruhodo" <- put naruhodo back in
  "Is it a full system ?")
(defvar *sys/light*
  (not *sys/full*)
  "Is it a light system ?")
#+end_src

Now, in order to load ~lisp~ and ~config~ files, it's just a matter of calling this
function with the right argument.

#+begin_src emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "lisp/"))
(add-to-list 'load-path (concat user-emacs-directory "lisp/vorg"))
(require 'init-func)
(vde/el-load-dir (concat user-emacs-directory "/config/"))
#+end_src

Finally, I want to be able to load files for a specific machine, in case I need it (not
entirely sure why yet but…)

#+begin_src emacs-lisp
(if (file-exists-p (downcase (concat user-emacs-directory "/hosts/" (vde/short-hostname) ".el")))
    (load-file (downcase (concat user-emacs-directory "/hosts/" (vde/short-hostname) ".el"))))
#+end_src

** Counting the time of loading
:PROPERTIES:
:ID:       2c7541e4-ed3c-497a-b078-732d18e82759
:END:

#+begin_src emacs-lisp
(let ((elapsed (float-time (time-subtract (current-time)
                                          emacs-start-time))))
  (message "Loading %s...done (%.3fs)" load-file-name elapsed))

(add-hook 'after-init-hook
          `(lambda ()
             (let ((elapsed
                    (float-time
                     (time-subtract (current-time) emacs-start-time))))
               (message "Loading %s...done (%.3fs) [after-init]"
                        ,load-file-name elapsed))) t)
#+end_src
* Configurations
:PROPERTIES:
:ID:       9bccfc88-2f6d-4437-8ce6-4ca8dd28e970
:END:

As seen above, I split my configurations in a =config= folder. Each of those configuration
has its own documentation, on its own page. Ideally, each module is optional and can be
skipped if not desired. In practice though, I load all of them, because this is my
config. I haven't really tried loading them all individually to make sure I don't have
links between them.

- Core System
  + [[file:emacs_keep_it_clean.org][keep emacs clean]]
  + [[file:emacs_appearance.org][appearance]]
  + editing
  + navigation
  + buffer and windows
  + files (with dired)
- Version control
- [[file:emacs_projects.org][Projects]]
- Programming
  + emacs-lisp
  + go
  + nix
- Writing
- Task management
  + [[file:my_organizational_workflow.org][Org-mode and agenda]] aka "My Organization Workflow"
- Communications
  + [[file:config_email_configuration.org][Email configuration]], notably using [[file:gnus.org][Gnus]] and [[file:notmuch.org][notmuch]].
* Nix(eries)
:PROPERTIES:
:header-args: :tangle ~/src/home/users/vincent/dev/emacs.nix
:END:

I am using [[file:nixos.org][NixOS]] and [[file:nix.org][Nix]], thus I do have a nix specific setup for Emacs.

** Scripts
:PROPERTIES:
:ID:       2ae616a0-a300-4cd5-8856-ff251082bb8d
:END:

I have a few scripts and desktop files that I want to get installed in my environment.

*** capture
The first one is a capture command that starts a new frame using the =org= daemon so that
I can quickly capture something from anywhere.

#+name: script-capture
#+begin_src nix :tangle no
capture = pkgs.writeScriptBin "capture" ''
  #!${pkgs.stdenv.shell}
  emacsclient -s /run/user/1000/emacs/org -n -F '((name . "capture") (width . 150) (height . 90))' -e '(org-capture)'
'';
#+end_src

*** emacsclient helpers

=ec= will start an emacs "window" frame from the emacs org server.

#+name: script-ec
#+begin_src nix :tangle no
ec = pkgs.writeScriptBin "ec" ''
  #!${pkgs.stdenv.shell}
  emacsclient -s /run/user/1000/emacs/org --create-frame $@
'';
#+end_src

=ec= will start an emacs termimal frame from the emacs org server.

#+name: script-et
#+begin_src nix :tangle no
et = pkgs.writeScriptBin "et" ''
  #!${pkgs.stdenv.shell}
  emacsclient -s /run/user/1000/emacs/org --tty $@
'';
#+end_src

*** portable dump command

=e= starts emacs using the portable dump.

#+name: script-e
#+begin_src nix :tangle no
e = pkgs.writeScriptBin "e" ''
  #!${pkgs.stdenv.shell}
  emacs --dump-file=~/.config/emacs/emacs.pdmp $@
'';
#+end_src

** Desktop files
:PROPERTIES:
:ID:       022aa37e-3f12-4a33-9f94-5a866ca6e481
:END:

- =org-protocol.desktop=: this register the org protocol in xdg.
  #+begin_src conf :tangle ~/src/home/users/vincent/dev/emacs/org-protocol.desktop
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient -s /run/user/1000/emacs/org -n %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
  #+end_src
- =ec.desktop=: this starts a new frame on the =org= daemon.
  #+begin_src conf :tangle ~/src/home/users/vincent/dev/emacs/ec.desktop
  [Desktop Entry]
  Name=Emacs (client)
  Exec=ec
  Type=Application
  Terminal=false
  Categories=System;
  Icon=emacs;
  #+end_src
- =capture.desktop=: this runs the =capture= script above
  #+begin_src conf :tangle ~/src/home/users/vincent/dev/emacs/capture.desktop
  [Desktop Entry]
  Name=Emacs capture
  Exec=capture
  Type=Application
  Terminal=false
  Categories=System;
  Icon=emacs;
  #+end_src

And then, we need to link those up :

#+name: desktop-files
#+begin_src nix :tangle no
home.file.".local/share/applications/org-protocol.desktop".source = ./emacs/org-protocol.desktop;
home.file.".local/share/applications/ec.desktop".source = ./emacs/ec.desktop;
home.file.".local/share/applications/capture.desktop".source = ./emacs/capture.desktop;
#+end_src

** Home packages

We need to install a few packages:
- =ditaa= and =graphiz= are there for org-mode and org-babel
- =pandoc= is for when I when to migrate a document from markdown to org-mode or the opposite
- =sqlite= is for packages like =forge=
- =zip= is… always useful
- =capture= is the script defined abovoe.

#+name: packages
#+begin_src nix :tangle no
home.packages = with pkgs; [
  ditaa
  graphviz
  pandoc
  sqlite
  zip
  # See if I can hide this under an option
  capture
  e
  ec
  et
];
#+end_src

** =programs.emacs=
:PROPERTIES:
:ID:       d0e07ae1-425f-4a87-834a-45da3c908711
:END:

=home-manager= comes with a modules named =programs.emacs=, so we are going to use it

#+name: programs.emacs
#+begin_src nix :tangle no
programs.emacs = {
  enable = true;
  package = pkgs.my.emacs;
  extraPackages = myExtraPackages;
};
#+end_src

#+name: myExtraPackages
#+begin_src nix :tangle no
myExtraPackages = epkgs: with epkgs; [
  ace-window
  aggressive-indent
  async
  avy
  bbdb
  beginend
  color-identifiers-mode
  company
  company-emoji
  company-go
  dash
  delight
  diredfl
  dired-collapse
  dired-git-info
  dired-narrow
  dired-quick-sort
  dired-rsync
  dired-subtree
  dockerfile-mode
  dumb-jump
  easy-kill
  edit-indirect
  envrc
  esh-autosuggest
  eshell-prompt-extras
  esup
  expand-region
  flimenu
  flycheck
  flycheck-golangci-lint
  git-annex
  git-commit
  gitattributes-mode
  gitconfig-mode
  github-review
  gitignore-mode
  go-mode
  go-stacktracer
  gotest
  goto-last-change
  hardhat
  helpful
  highlight
  highlight-indentation
  highlight-numbers
  ibuffer-vc
  icomplete-vertical
  iedit
  json-mode
  magit
  magit-annex
  magit-popup
  magit-todos
  markdown-mode
  minions
  modus-operandi-theme
  moody
  mwim
  nix-buffer
  nix-mode
  nixpkgs-fmt
  no-littering
  ob-async
  ob-go
  ob-http
  olivetti
  orderless
  org-capture-pop-frame
  org-gcal
  org-journal
  org-plus-contrib
  org-ql
  org-ref
  org-roam
  org-super-agenda
  org-superstar
  org-tree-slide
  org-web-tools
  orgit
  ox-pandoc
  pandoc-mode
  pdf-tools
  pkgs.bookmark-plus
  pkgs.dired-plus
  projectile
  python-mode
  rainbow-delimiters
  rainbow-mode
  rg
  ripgrep
  scratch
  shr-tag-pre-highlight
  smartparens
  symbol-overlay
  trashed
  try
  undo-tree
  use-package
  visual-fill-column
  visual-regexp
  vterm
  web-mode
  wgrep
  whole-line-or-region
  with-editor
  xterm-color
  yaml-mode
];
#+end_src

** Emacs /server/

#+name: emacs-server
#+begin_src nix :tangle no
services.emacs-server = {
  enable = true;
  package = pkgs.my.emacs;
  name = "org";
  shell = pkgs.zsh + "/bin/zsh -i -c";
  # FIXME do this in the derivation :)
  # extraOptions = "--dump-file=${config.home.homeDirectory}/.config/emacs/emacs.pdmp";
};
#+end_src

** Commands and sessions variables

Let's define some useful /commands/ that can be used

Let's define some

** Legacy
:PROPERTIES:
:END:

#+name: legacy
#+begin_src nix :tangle no
home.sessionVariables = {
  EDITOR = "et";
  ALTERNATE_EDITOR = "et";
};
#+end_src

** Configuration layout
:PROPERTIES:
:ID:       72cc55fc-4c47-4425-9d0c-2b309068ccb9
:END:

Here we define the =emacs.nix= file that gets generated by the source blocks in our Org
document. This is the file that actually gets loaded on startup. The placeholders in
angled brackets correspond to the ~NAME~ directives above the ~SRC~ blocks throughout this
document.

#+begin_src nix :noweb no-export :exports code
# Note: this file is autogenerated from an org-mode file.
{ config, lib, pkgs, ... }:

with lib;
let
  <<script-capture>>
  <<script-e>>
  <<script-et>>
  <<script-ec>>
  <<myExtraPackages>>
in
{
  <<desktop-files>>
  <<packages>>
  <<programs.emacs>>
  <<emacs-server>>
  <<legacy>>
}
#+end_src
* Inspirations
:PROPERTIES:
:ID:       575a424a-8121-40d9-85bd-ac4975818a8d
:END:

This is inspired by a crazy amount of configurations (litterate or note):

- [[https://protesilaos.com/dotemacs/][Protesilaos Stravou's dotemacs]]
- [[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]] from [[https://github.com/tecosaur][tecosaur]]
- [[https://gitlab.com/ndw/dotfiles][https://gitlab.com/ndw/dotfiles]]
- [[https://github.com/MatthewZMD/.emacs.d][https://github.com/MatthewZMD/.emacs.d]]
- [[https://github.com/alhassy/emacs.d][https://github.com/alhassy/emacs.d]]
- [[https://github.com/chmouel/emacs-config][https://github.com/chmouel/emacs-config]]
- [[https://github.com/seagle0128/.emacs.d][https://github.com/seagle0128/.emacs.d]]
- [[https://github.com/hlissner/doom-emacs][https://github.com/hlissner/doom-emacs]]
- [[http://doc.norang.ca/org-mode.html][http://doc.norang.ca/org-mode.html]]

And also:

- [[https://sriramkswamy.github.io/dotemacs/][Emacs configuration file]]
- [[https://blog.d46.us/advanced-emacs-startup/][Advanced Techniques for Reducing Emacs Startup Time]]
- [[https://www.bartuka.com/posts/emacs-config/index.html][@bartuka: emacs.d]]
- [[http://www.howardism.org/Technical/Emacs/getting-boxes-done.html][Getting Boxes Done]]
- [[https://idiocy.org/emacs-fonts-and-fontsets.html][Emacs, fonts and fontsets]]
- [[https://spin.atomicobject.com/2016/05/27/write-emacs-package/][A Simple Guide to Writing & Publishing Emacs Packages]]
- [[https://alphapapa.github.io/emacs-package-dev-handbook/][The Emacs Package Developer's Handbook]]
- [[https://tecosaur.github.io/emacs-config/config.html][Doom Emacs Configuration]]


* Links

Here is a compilation of /random/ articles around GNU/Emacs that I found interesting to
share. I may add comment on those too.
** TODO [[https://aliquote.org/post/minimalist-emacs/][Minimalist Emacs - aliquot]]
[2020-09-17 Thu 17:55]

** [[https://github.com/kensanata/ggg#gmail-gnus-gpg-guide-gggg][kensanata/ggg: Gmail, Gnus and GPG]]
[2020-07-08 Wed 07:37]
** [[https://www.greghendershott.com/2017/02/emacs-themes.html][Emacs Themes]]
[2020-06-02 Tue 18:07]
** [[https://degruchy.org/2020/05/26/binding-emacs/][Binding Emacs – Verily]]
[2020-06-02 Tue 18:04]
** [[https://mihaiolteanu.me/eshell-toggle/][How to create and jump to eshell buffers with a single command]]
[2020-05-29 Fri 15:05]
** TODO [[https://www.reddit.com/r/emacs/comments/fk7p49/piping_stdout_to_emacs/][Piping stdout to Emacs : emacs]]                               :emacs:
[2020-03-24 Tue 07:54]

** TODO [[https://explog.in/notes/poet.html][Making Poet, an Emacs theme]]                                  :emacs:
[2020-03-25 Wed 16:58]

** TODO [[https://willschenk.com/articles/2020/tramp_tricks/][Emacs Tramp tricks]]                                           :emacs:
[2020-03-08 Sun 16:44]
** TODO [[https://azzamsa.com/n/scripts-el/][Useful Emacs Lisp Scripts 🌱 · AZZAMSA]]
[2020-06-18 Thu 18:41]
** TODO [[https://emacsredux.com/blog/2020/06/10/comment-commands-redux/][Comment Commands Redux | Emacs Redux]]                         :emacs:
[2020-06-23 Tue 17:45]
** TODO [[https://github.com/MatthewZMD/.emacs.d][MatthewZMD/.emacs.d: M-EMACS, a full-feature GNU Emacs configuration distribution]]
[2020-06-29 Mon 11:35]
** TODO [[https://writequit.org/eos/eos.html][The Emacs Operating System (EOS)]]
[2020-07-02 Thu 18:20]
** TODO [[https://justin.abrah.ms/dotfiles/emacs.html][My Emacs Configuration]]
[2020-07-15 Wed 12:29]
** TODO [[https://jakemccrary.com/blog/2020/11/14/speeding-up-magit/][Speeding up magit - Jake McCrary]]
[2020-11-17 Tue 18:09]
** TODO [[https://tech.toryanderson.com/2020/11/13/migrating-to-a-custom-file-less-setup/][Migrating to a custom-file-less setup | Tech.ToryAnderson.com]]
[2020-11-19 Thu 11:00]

** TODO [[https://www.philnewton.net/blog/leanpub-with-emacs/][Writing a Leanpub book with Emacs - philnewton.net]]
[2020-11-19 Thu 11:11]
** TODO [[https://en.liujiacai.net/2020/11/29/why-emacs/][What you need to know before try Emacs - KeepCoding]]
[2020-12-01 Tue 08:02]

** TODO [[https://github.com/rougier/nano-emacs][rougier/nano-emacs: GNU Emacs / N Λ N O - Emacs made simple]]
[2020-12-01 Tue 08:12]
