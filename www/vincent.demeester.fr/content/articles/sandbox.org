#+TITLE: Emacs org-mode sandbox
#+SUBTITLE: A Clean and Comfort Stylesheet
#+SETUPFILE: .setup.org

#+BEGIN_abstract

This article serves as a complete demonstration for my [[file:notes.css][org.css]], a simple and
clean stylesheet for org-exported HTML file.  You may switch between the default
style provided by Emacs Org mode, i.e., styles specified in the variable
=org-html-style-default= and my customized stylesheet using the button at the
top left corner.

#+END_abstract

#+TOC: headlines 2

Hello ~world~ vs =world= 🙃

* Demo
:PROPERTIES:
:CUSTOM_ID: sec:demo
:END:
<2015-11-09 Mon 14:41>

#+BEGIN_QUOTE

[[http://orgmode.org/][Org mode]] is for keeping notes, maintaining TODO lists, planning projects,
and authoring documents with a fast and effective /plain-text/ system
cite:dominik2003-org.

#+END_QUOTE


We use [[https://en.wikipedia.org/wiki/Lorem_ipsum][Lorem ipsum]] text to demonstrate all elements you would expect to see in
the org-exported HTML pages.  Note however that the =.title=, =.subtitle= and
=#postamble= element are not included in this section.

** TODO Title with TODO

** DONE Title with DONE

Some inactive timestamps

[2019-02-20 Wed 12:03] With time !

Let's write some stuff between the two !

[2019-02-20 Wed] Without time

** [#A] Title with Priority

** Title with Tag                                                 :tag0:tag1:

** Miscellaneous

#+TOC: headlines 2 local

*** Table

#+CAPTION: Table Caption
| \(N\) | \(N^2\) | \(N^3\) | \(N^4\) | \(\sqrt n\) | \(\sqrt[4]N\) |
|-------+---------+---------+---------+-----------+-----------------|
|     1 |       1 |       1 |       1 |         1 |               1 |
|     2 |       4 |       8 |      16 |    1.4142 |          1.1892 |
|     3 |       9 |      27 |      81 |    1.7321 |          1.3161 |
|-------+---------+---------+---------+-----------+-----------------|
#+TBLFM: $2=$1^2::$3=$1^3::$4=$1^4::$5=sqrt($1)::$6=sqrt(sqrt(($1)))

*** List

**** The ordered list

1. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
2. Donec et massa sit amet ligula maximus feugiat.
3. Morbi consequat orci et tincidunt sagittis.

**** Unordered list

- Aliquam non metus nec elit pellentesque scelerisque.
- In accumsan nunc ac orci varius hendrerit.
- Suspendisse non eros eu nisi finibus maximus.

**** Unordered checked list [1/3]

- [X] Aliquam non metus nec elit pellentesque scelerisque.
- [ ] In accumsan nunc ac orci varius hendrerit.
- [ ] Suspendisse non eros eu nisi finibus maximus.

**** Definition list

#+BEGIN_aside
This is a side note. If collection is a string, item must also be a string, and is
compared using =strings.Contains()=. If collection is a Map, contains will succeed if item
is a key in the map.
#+END_aside

- Lorem ipsum :: dolor sit amet, consectetur adipiscing elit.  Mauris laoreet
     sollicitudin venenatis.  Duis sed consequat dolor.
- Etiam feugiat :: pharetra sapien et semper.  Nunc ornare lacus sit amet massa
     auctor, vitae aliquam eros interdum.  Mauris arcu ante, imperdiet vel purus
     ac, bibendum faucibus diam.  Ut blandit nec mi at ultricies.  Donec eget
     mattis nisl.  In sed nibh felis.  Cras quis convallis orci.
- Sed aliquam :: odio sed faucibus aliquam, arcu augue elementum justo, ut
     vulputate ligula sem in augue.  Maecenas ante felis, pellentesque auctor
     semper non, eleifend quis ante.  Fusce enim orci, suscipit ac dapibus et,
     fermentum eu tortor.  Duis in facilisis ante, quis faucibus dolor.  Etiam
     maximus lorem quis accumsan vehicula.

**** Drawers

Still outside the drawer

:generic:
This is inside the drawer.
:END:

And an update 😉

:update:
This is an update :)
:END:

After the drawer.

:Note:
This is a note
:END:
:Info:
This is an info
:END:
:Tip:
This is a tip
:END:
:Warning:
This is a warning
:END:
*** Picture

#+CAPTION: Demo Picture with Caption
#+ATTR_HTML: :class shadow
[[file:./images/sandbox/pic-demo.png]]

And a really wide picture.

#+CAPTION: A really long picture
#+ATTR_HTML: :width 100%
[[file:./images/sandbox/long-img.png]]

*** Math

\begin{align}
\mathcal{F}(a) &= \frac{1}{2\pi i}\oint_\gamma \frac{f(z)}{z - a}\,dz\\
\int_D (\nabla\cdot \mathcal{F})\,dV &=\int_{\partial D}\mathcal{F}\cdot n\, dS
\end{align}

* Org-mode links                                                      :emacs:

** TODO Host dependent link

- grep:foo:~/src/github.com/vdemeester
- rg:foo:~/src/github.com/vdemeester

** Github links

- gh:vdemeester/ape
- [[gh:knative/build-pipeline#123][A super PR here]]
- gh:knative/build-pipeline#123

** ~man~

- [[man:tmux][tmux]]
- [[man:git][git]]

- [[man:git-commit][Manpage for git-commit]]
- [[https://orgmode.org/manual/store_002dlink-protocol.html][The Org Manual: store-link protocol]]

** Others

- tag:foo

- [[git:~/src/github.com/vdemeester/ape/README.md::v0.2.0]]

* Org-babel

** ~emacs-lisp~

#+begin_src emacs-lisp :exports both :results value drawer
(message "foo is bar")
#+end_src

#+RESULTS:
:results:
foo is bar
:end:

** ~go~

#+begin_src go :imports '("fmt") :exports both :results value drawer
  fmt.Println("Hello, 世界")
#+end_src

#+RESULTS:
:results:
Hello, 世界
:end:

** ~http~

#+BEGIN_SRC http :pretty
POST http://httpbin.org/post
Content-Type: application/json

{
  "key": "value"
}
#+END_SRC

#+RESULTS:
:results:
{
  "url": "http://httpbin.org/post",
  "json": {
    "key": "value"
  },
  "headers": {
    "User-Agent": "curl/7.35.0",
    "Host": "httpbin.org",
    "Content-Type": "application/json",
    "Content-Length": "18",
    "Accept": "*/*"
  },
  "form": {},
  "files": {},
  "data": "{  \"key\": \"value\"}",
  "args": {}
}
:end:

** ~rust~

#+begin_src rust :exports both :results value drawer
  fn main() {
      let greetings = ["Hello", "Hola", "Bonjour",
                       "Ciao", "こんにちは", "안녕하세요",
                       "Cześć", "Olá", "Здравствуйте",
                       "chào bạn", "您好"];

      for (num, greeting) in greetings.iter().enumerate() {
          print!("{} : ", greeting);
          match num {
              0 =>  println!("This code is editable and runnable!"),
              1 =>  println!("Este código es editable y ejecutable!"),
              2 =>  println!("Ce code est modifiable et exécutable!"),
              3 =>  println!("Questo codice è modificabile ed eseguibile!"),
              4 =>  println!("このコードは編集して実行出来ます！"),
              5 =>  println!("여기에서 코드를 수정하고 실행할 수 있습니다!"),
              6 =>  println!("Ten kod można edytować oraz uruchomić!"),
              7 =>  println!("Esse código é editável e executável!"),
              8 =>  println!("Этот код можно отредактировать и запустить!"),
              9 =>  println!("Bạn có thể edit và run code trực tiếp!"),
              10 =>  println!("这段代码是可以编辑并且能够运行的！"),
              _ =>  {},
          }
      }
  }
#+end_src

#+RESULTS:
:results:
Hello : This code is editable and runnable!
Hola : Este código es editable y ejecutable!
Bonjour : Ce code est modifiable et exécutable!
Ciao : Questo codice è modificabile ed eseguibile!
こんにちは : このコードは編集して実行出来ます！
안녕하세요 : 여기에서 코드를 수정하고 실행할 수 있습니다!
Cześć : Ten kod można edytować oraz uruchomić!
Olá : Esse código é editável e executável!
Здравствуйте : Этот код можно отредактировать и запустить!
chào bạn : Bạn có thể edit và run code trực tiếp!
您好 : 这段代码是可以编辑并且能够运行的！
:end:

** ~typescript~

*** Execute with node.js

#+BEGIN_SRC typescript :exports both :results value drawer
module Greeting {
    export class Hello {
        constructor(private text : string) {
        }
        say() :void{
            console.log(this.text);
        }
    }
}

var hello : Greeting.Hello = new Greeting.Hello("Hello, World!");
hello.say();
#+END_src

#+RESULTS:
:results:
Hello, World!
:end:

*** Transpile

You can see transpile results by specifying ":wrap SRC js" header argument.

#+Begin_SRC typescript :exports both :wrap SRC js :results value drawer
module Greeting {
    export class Hello {
        constructor(private text : string) {
        }
        say() :void{
            consonle.log(this.text);
        }
    }
}

var hello : Greeting.Hello = new Greeting.Hello("Hello, World!");
hello.say();
#+END_SRC

#+RESULTS:
:results:
#+BEGIN_SRC js
var Greeting;
(function (Greeting) {
    var Hello = (function () {
        function Hello(text) {
            this.text = text;
        }
        Hello.prototype.say = function () {
            console.log(this.text);
        };
        return Hello;
    })();
    Greeting.Hello = Hello;
})(Greeting || (Greeting = {}));
var hello = new Greeting.Hello("Hello, World!");
hello.say();
#+END_SRC
:end:

** Ditaa

Let's try something with ~ditaa~

#+begin_src ditaa :file ./images/sandbox/some_filename.png
      +-----------+        +---------+
      |    PLC    |        |         |
      |  Network  +<------>+   PLC   +<---=---------+
      |    cRED   |        |  c707   |              |
      +-----------+        +----+----+              |
                                ^                   |
                                |                   |
                                |  +----------------|-----------------+
                                |  |                |                 |
                                v  v                v                 v
        +----------+       +----+--+--+      +-------+---+      +-----+-----+       Windows clients
        |          |       |          |      |           |      |           |      +----+      +----+
        | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL| . . .|cYEL|
        |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |      |    |
        +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+      +----+
           ^    ^          +----------+             ^           +-------+---+
           |    |                                   |
           |    +--------=--------------------------+
           v
  +--------+--------+
  |                 |
  | Millwide System |            -------- Data ---------
  | cBLU            |            --=----- Signals ---=--
  +-----------------+
#+end_src

#+RESULTS:
[[file:./images/sandbox/some_filename.png]]


** Graphviz

** References and labels !

foo is bar

#+BEGIN_SRC emacs-lisp -l "<ref:%s>"
(save-excursion                ;; <ref:foo>
  (message "this is baz")
  (goto-char (point-min))    ;; <ref:bar>
#+END_SRC

In line [[(foo)]] we remember the current position. [[(bar)][Line (bar)]] jumps to
point-min.

#+BEGIN_SRC emacs-lisp -n -r
(save-excursion                 (ref:sc)
  (message "this is sparta")
  (goto-char (point-min))      (ref:jump)
#+END_SRC

In line [[(sc)]] we remember the current position. [[(jump)][Line (jump)]] jumps to point-min.


* Counsel

/this is italic/
_this should be underlined_

* Known Issues
:PROPERTIES:
:CUSTOM_ID: sec:known-issues
:END:

The citation exporter, =ox-bibtex=, does NOT work seamlessly.  As of =Org-mode
8.3.2=, I have the following issues.

** +Dangling Element+                                                :solved:
:PROPERTIES:
:CUSTOM_ID: sec:dangling-element
:END:

The lisp function =insert-file-contents= used in =ox-bibtex= does not move point
and insertion-marker to the end of inserted text (I'm not sure it is a bug or an
intention).  The result is that the citation is a dangling table not included in
the bibliography div.

The expected result is

#+BEGIN_SRC html
<div id="bibliography">
  <h2>Bibliography</h2>
  <table>
  <!-- Citation content goes here -->
  </table>
</div>
#+END_SRC

But we got

#+BEGIN_SRC html
<div id="bibliography">
  <h2>Bibliography</h2>
</div>
<table>
<!-- Citation content goes here -->
</table>
#+END_SRC

Unless a patch is submitted, we may need to manually adjust this weird result.
