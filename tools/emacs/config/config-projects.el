;;; config-projects.el --- -*- lexical-binding: t; -*-
;;; Commentary:
;;; Project related configuration.
;;; This is mainly using projectile now, but built-in projects module seems promising for long-term.
;;; Note: this file is autogenerated from an org-mode file.
;;; Code:


(use-package project
  :bind (("C-x p v" . vde-project-magit-status)
         ("C-x p s" . vde-project-vterm))
  :init
  (setq-default project-compilation-buffer-name-function 'project-prefixed-buffer-name)
  (defun vde-project-magit-status ()
    "Run `magit-status' on project."
    (interactive)
    (let* ((pr (project-current t))
           (dir (cdr pr)))
      (magit-status dir)))

  (defun vde-project-vterm ()
    "Run `vterm' on project.
If a buffer already exists for running a vterm shell in the project's root,
switch to it. Otherwise, create a new vterm shell."
    (interactive)
    (let* ((default-directory (project-root (project-current t)))
           (default-project-vterm-name (project-prefixed-buffer-name "vterm"))
           (vterm-buffer (get-buffer default-project-vterm-name)))
      (if (and vterm-buffer (not current-prefix-arg))
          (pop-to-buffer-same-window vterm-buffer)
        (let* ((cd-cmd (concat " cd " (shell-quote-argument default-directory))))
          (vterm default-project-vterm-name)
          (with-current-buffer vterm-buffer
            (vterm-send-string cd-cmd)
            (vterm-send-return)))))))

(provide 'config-projects)
;;; config-projects.el ends here
