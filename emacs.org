#+TITLE: Vincent Demeester's .emacs.d

* Overview
:PROPERTIES:
:CUSTOM_ID: h:958fee2e-86db-4d34-bef6-d5b4f4f73000
:END:
** Canonical links to this document
:PROPERTIES:
:CUSTOM_ID: h:11f5b93f-6dd7-483c-aa44-e10471f17c22
:END:

+ HTML version :: [[https://sbr.pm/dotemacs][sbr.pm/dotemacs]]
+ Git repo :: [[https://github.com/vdemeester/emacs-config.git][github.com/vdemeester/emacs-config]]

** What is this
:PROPERTIES:
:CUSTOM_ID: h:e9d0ae1c-244c-4ad9-b0dc-c5e53b8d49ea
:END:

The present document, referred to in the source code version as =emacs.org=, contains the
bulk of my configurations for GNU Emacs. It is designed using principles of "literate
programming": a combination of ordinary language and inline code blocks. Emacs knows how
to parse this file properly so as to evaluate only the elisp ("Emacs Lisp") included
herein. The rest is for humans to make sense of my additions and their underlying
rationale.

#+BEGIN_QUOTE
Literate programming allows us to be more expressive and deliberate. Not only we can use
typography to its maximum potential, but can also employ techniques such as internal links
between sections. This makes the end product much better for end users, than a terse
script.
#+END_QUOTE

I switched back and forth on using =org-mode= and literate programming, so why re-using
it. First, I think I went for it the wrong way the first time. I copied part of the
configuration from elsewhere, sometimes without really needing what I was copying. for
some reason I think this is a common pattern when configuring Emacs. You start by using a
distribution (Doom Emacs, Spacemacs, …) or by copying configuration from all over the
place. Slowly but surely you realize this was a mistake as you didn't learn anything, so
you *reboot* your configuration.
* Legacy

This holds legacy code from the previous configuration (without org-mode). This will
slowly but surely move into an org-mode header and or disappear.

** ~early-init.el~

#+begin_src emacs-lisp :tangle early-init.el
  ;;; -*- lexical-binding: t; -*-
  ;; Do not initialise the package manager.  This is done in `init.el'.
  (setq package-enable-at-startup nil)

  ;; Do not resize the frame at this early stage.
  (setq frame-inhibit-implied-resize)

  (provide 'early-init)
#+end_src

** ~init.el~

#+begin_src emacs-lisp :tangle init.el
  ;;; -*- lexical-binding: t; -*-
  (defconst emacs-start-time (current-time))
  (defvar file-name-handler-alist-old file-name-handler-alist)

  (setq package-enable-at-startup nil
        file-name-handler-alist nil
        message-log-max 16384
        gc-cons-threshold 402653184
        gc-cons-percentage 0.6
        auto-window-vscroll nil)

  (add-hook 'after-init-hook
            `(lambda ()
               (setq file-name-handler-alist file-name-handler-alist-old
                     gc-cons-threshold 800000
                     gc-cons-percentage 0.1)
               (garbage-collect)) t)

  (let ((minver 25))
    (unless (>= emacs-major-version minver)
      (error "Your Emacs is too old -- this configuration requrise v%s or higher" minver)))

  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-language-environment 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)

  ;;; package setup
  (require 'package)

  (setq package-archives
        '(("melpa" . "http://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")
          ("gnu" . "https://elpa.gnu.org/packages/")))

  (setq package-archive-priorities
        '(("melpa-stable" . 4)
          ("melpa" .  3)
          ("org" . 2)
          ("gnu" . 1)))

  (require 'tls)

  ;; From https://github.com/hlissner/doom-emacs/blob/5dacbb7cb1c6ac246a9ccd15e6c4290def67757c/core/core-packages.el#L102
  (setq gnutls-verify-error (not (getenv "INSECURE")) ; you shouldn't use this
        tls-checktrust gnutls-verify-error
        tls-program (list "gnutls-cli --x509cafile %t -p %p %h"
                          ;; compatibility fallbacks
                          "gnutls-cli -p %p %h"
                          "openssl s_client -connect %h:%p -no_ssl2 -no_ssl3 -ign_eof"))

  ;; Initialise the packages, avoiding a re-initialisation.
  (unless (bound-and-true-p package--initialized)
    (setq package-enable-at-startup nil)
    (package-initialize))

  (setq load-prefer-newer t)              ; Always load newer compiled files
  (setq ad-redefinition-action 'accept)   ; Silence advice redefinition warnings

  ;; Init `delight'
  (unless (package-installed-p 'delight)
    (package-refresh-contents)
    (package-install 'delight))

  ;; Configure `use-package' prior to loading it.
  (eval-and-compile
    (setq use-package-always-ensure nil)
    (setq use-package-always-defer nil)
    (setq use-package-always-demand nil)
    (setq use-package-expand-minimally nil)
    (setq use-package-enable-imenu-support t))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (use-package dash) ; A modern list library

  (use-package use-package-ensure-system-package :ensure t :pin melpa)

  (require 'subr-x)
  (require 'time-date)

  ;;; Initialization
  (setq inhibit-default-init t)           ; Disable the site default settings

  (use-package exec-path-from-shell       ; Set up environment variables
    :if (display-graphic-p)
    :unless (eq system-type 'windows-nt)
    :config
    (setq exec-path-from-shell-variables
          '("PATH"               ; Full path
            "INFOPATH"           ; Info directories
            "GOPATH"             ; Golang path
            ))

    (exec-path-from-shell-initialize))

  ;; Set separate custom file for the customize interface
  (defconst vde/custom-file (locate-user-emacs-file "custom.el")
    "File used to store settings from Customization UI.")

  (use-package cus-edit                   ; Set up custom.el
    :defer t
    :config
    (setq
     custom-file vde/custom-file
     custom-buffer-done-kill nil          ; Kill when existing
     custom-buffer-verbose-help nil       ; Remove redundant help text
     custom-unlispify-tag-names nil       ; Show me the real variable name
     custom-unlispify-menu-entries nil)
    :init (load vde/custom-file 'no-error 'no-message))

  (use-package no-littering               ; Keep .emacs.d clean
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    (setq
     create-lockfiles nil
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)

    (setq
     backup-directory-alist
     `((".*" . ,(no-littering-expand-var-file-name "backup/")))
     auto-save-file-name-transforms
     `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

  (setenv "PAGER" "cat")
  (setenv "TERM" "xterm-256color")
  (setenv "NOTMUCH_CONFIG" (expand-file-name ".config/notmuch/notmuchrc" (getenv "HOME")))

  (use-package server                     ; The server of `emacsclient'
    :config (or (server-running-p) (server-mode)))

  (use-package pinentry
    :config
    (setenv "INSIDE_EMACS" (format "%s,comint" emacs-version))
    (pinentry-start))

  ;; Confirm before quitting Emacs
  (setq confirm-kill-emacs #'y-or-n-p)

  ;;; Require files under ~/.emacs.d/lisp
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  ;; Enable `vde-mode' unless `disable-pkg-vde-mode' is set to `t' in
  ;; `setup-var-overrides.el'.
  (when (not (bound-and-true-p disable-pkg-setup-mode))
    (use-package setup-vde-mode))

  (use-package setup-style)
  (use-package setup-keybindings)
  (use-package setup-completion)
  (use-package setup-vcs)
  (use-package setup-dired)
  (use-package setup-search)
  (use-package setup-files)
  (use-package setup-editing)
  (use-package setup-multiple-cursors)
  (use-package setup-navigating)
  (use-package setup-windows)
  (use-package setup-buffers)
  (use-package setup-projectile)
  (use-package setup-shells)
  (use-package setup-compile)
  (use-package setup-org)
  ;; Programming languages
  (use-package setup-nix)
  (use-package setup-go)
  (use-package setup-web)
  (use-package setup-docker)
  (use-package setup-hydras)
  (use-package setup-browser)
  (use-package setup-notmuch)

  ;; C-up/down onn console
  (when (not window-system)
    (define-key function-key-map "\eO1;5A"    [C-up])
    (define-key function-key-map "\eO1;5B"  [C-down])
    (define-key function-key-map "\eO1;5C" [C-right])
    (define-key function-key-map "\eO1;5D"  [C-left])
    )

  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading %s...done (%.3fs)" load-file-name elapsed))

  (add-hook 'after-init-hook
            `(lambda ()
               (let ((elapsed
                      (float-time
                       (time-subtract (current-time) emacs-start-time))))
                 (message "Loading %s...done (%.3fs) [after-init]"
                          ,load-file-name elapsed))) t)

  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)

  (put 'magit-diff-edit-hunk-commit 'disabled nil)
  ;; Local Variables:
  ;; coding: utf-8
  ;; indent-tabs-mode: nil
  ;; End:
  ;;; Finalization
  ;;; init.el ends here
#+end_src

** ~setup-browser.el~

#+begin_src emacs-lisp :tangle lisp/setup-browser.el
  ;;; -*- lexical-binding: t; -*-
  (use-package shr
    :commands (eww
               eww-browse-url)
    :custom
    (browse-url-browser-function 'eww-browse-url)
    (shr-use-fonts nil)
    (shr-use-colors nil)
    (shr-max-image-proportion 0.2)
    (shr-width (current-fill-column)))

  (use-package shr-tag-pre-highlight
    :after shr
    :config
    (add-to-list 'shr-external-rendering-functions
                 '(pre . shr-tag-pre-highlight))
    (when (version< emacs-version "26")
      (with-eval-after-load 'eww
        (advice-add 'eww-display-html :around
                    'eww-display-html--override-shr-external-rendering-functions))))

  (use-package eww
    :defer t
    :init
    (setq browse-url-browser-function
          '((".*google.*maps.*" . browse-url-generic)
            ;; Github goes to firefox, but not gist
            ("http.*\/\/github.com" . browse-url-generic)
            ("http.*\/\/github.io" . browse-url-generic)
            ("http.*\/\/gitlab.com" . browse-url-generic)
            ("http.*\/\/gitlab.io" . browse-url-generic)
            ("groups.google.com" . browse-url-generic)
            ("docs.google.com" . browse-url-generic)
            ("melpa.org" . browse-url-generic)
            ("build.*\.elastic.co" . browse-url-generic)
            (".*-ci\.elastic.co" . browse-url-generic)
            ("internal-ci\.elastic\.co" . browse-url-generic)
            ("zendesk\.com" . browse-url-generic)
            ("salesforce\.com" . browse-url-generic)
            ("stackoverflow\.com" . browse-url-generic)
            ("apache\.org\/jira" . browse-url-generic)
            ("thepoachedegg\.net" . browse-url-generic)
            ("zoom.us" . browse-url-generic)
            ("blujeans.com" . browse-url-generic)
            ("t.co" . browse-url-generic)
            ("twitter.com" . browse-url-generic)
            ("\/\/a.co" . browse-url-generic)
            ("youtube.com" . browse-url-generic)
            ("amazon.com" . browse-url-generic)
            ("slideshare.net" . browse-url-generic)
            ("." . eww-browse-url)))
    (setq shr-external-browser 'browse-url-generic)
    (setq browse-url-generic-program (executable-find "firefox"))
    (add-hook 'eww-mode-hook #'toggle-word-wrap)
    (add-hook 'eww-mode-hook #'visual-line-mode)
    :config
    (define-key eww-mode-map "o" 'eww)
    (define-key eww-mode-map "O" 'eww-browse-with-external-browser))

  (provide 'setup-browser)
#+end_src

** ~setup-style.el~

#+begin_src emacs-lisp :tangle lisp/setup-style.el
  ;;; -*- lexical-binding: t; -*-
  ;;; ¯\_(ツ)_/¯
  ;;; - Iosevka (https://github.com/be5invis/Iosevka)
  ;;; - Fira Sans (https://github.com/mozilla/Fira/)
  (setq font-height 110)
  (cond
   ((string= (system-name) "hokkaido")
    (setq font-height 100)))
  ;; Middle/Near East: שלום, السّلام عليكم
  (when (member "Noto Sans Arabic" (font-family-list))
    (set-fontset-font t 'arabic "Noto Sans Arabic"))
  (when (member "Noto Sans Hebrew" (font-family-list))
    (set-fontset-font t 'arabic "Noto Sans Hebrew"))

  ;; Africa: ሠላም
  (when (member "Noto Sans Ethiopic" (font-family-list))
    (set-fontset-font t 'ethiopic "Noto Sans Ethiopic"))

  (set-face-attribute 'default nil
                      :family "Fira Code" ; "Overpass Mono" to try someday
                      :height font-height)
  (set-face-attribute 'variable-pitch nil
                      :family "Fira Sans"
                      :height font-height
                      :weight 'regular)

  ;;; Utilities and key bindings
  (defun mu-reset-fonts ()
    "Reset fonts to my preferences."
    (interactive)
    (set-face-attribute 'default nil
                        :family "Fira Code"
                        :height font-height)
    (set-face-attribute 'variable-pitch nil
                        :family "Fira Sans"
                        :height font-height
                        :weight 'regular))

  (bind-key "C-c t f" #'mu-reset-fonts)

  ;;; Interface
  (use-package frame                      ; Frames
    :bind ("C-c w f" . toggle-frame-fullscreen)
    :init
    ;; Kill `suspend-frame'
    (unbind-key "C-x C-z")
    :config (add-to-list 'initial-frame-alist '(fullscreen . maximized)))

  (use-package emacs
    :custom
    (use-file-dialog nil)
    (use-dialog-box nil)
    (inhibit-splash-screen t)
    (echo-keystrokes 0.1) ; Faster echo keystrokes
    (line-number-display-limit-width 10000) ;; Avoid showing ?? in the mode line when we have long lines.
    (display-time-world-list '(("Europe/London" "London")
                               ("Europe/Paris" "Paris")
                               ("America/New_York" "Boston")
                               ("America/Los_Angeles" "San-Francisco")
                               ("Asia/Calcutta" "Bangalore")
                               ("Australia/Brisbane" "Brisbane")))
    :config
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (horizontal-scroll-bar-mode -1)
    (line-number-mode 1)
    (column-number-mode 1)
    (global-hl-line-mode 1)
    (global-unset-key (kbd "C-z"))
    (global-unset-key (kbd "C-x C-z"))
    (global-unset-key (kbd "C-h h")))

  ;;; Theme
  (setq custom-safe-themes t)    ; Treat themes as safe

  (use-package doom-themes
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  (use-package solaire-mode
    :config
    (setq solaire-mode-remap-modeline nil)
    (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
    (add-hook 'after-revert-hook #'turn-on-solaire-mode)
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)
    (advice-add #'persp-load-state-from-file :after #'solaire-mode-restore-persp-mode-buffers))

  ;; Show buffer position percentage starting from top
  (setq mode-line-percent-position '(-3 "%o"))
  (defvar mu-eyebrowse-mode-line
    '(:propertize
      (:eval
       (when (bound-and-true-p eyebrowse-mode)
         (let* ((num (eyebrowse--get 'current-slot))
                (tag (when num
                       (nth 2 (assoc num (eyebrowse--get 'window-configs)))))
                (str (concat
                      " "
                      (if (and tag (< 0 (length tag)))
                          tag
                        (when num (int-to-string num)))
                      " ")))
           str)))
      face (:background "#81a2be" :foreground "#373b41"))
    "Mode line format for Eyebrowse.")

  (put 'mu-eyebrowse-mode-line 'risky-local-variable t)

  (setq-default mode-line-format
                '("%e"
                  mu-eyebrowse-mode-line
                  mode-line-front-space
                  mode-line-mule-info
                  mode-line-client
                  mode-line-modified
                  mode-line-remote
                  mode-line-frame-identification
                  mode-line-buffer-identification " " mode-line-position
                  (vc-mode vc-mode)
                  (multiple-cursors-mode mc/mode-line)
                  " " mode-line-modes
                  mode-line-end-spaces))

  (defmacro rename-modeline (package-name mode new-name)
    "Rename PACKAGE-NAME with MODE into NEW-NAME in the mode line."
    `(eval-after-load ,package-name
       '(defadvice ,mode (after rename-modeline activate)
          (setq mode-name ,new-name))))

  (defun generic-term-init ()
    (visual-line-mode -1)
    (setq-local global-hl-line-mode nil)
    (setq-local scroll-margin 0))

  (add-hook 'term-mode-hook #'generic-term-init)
  (add-hook 'shell-mode-hook #'generic-term-init)
  (add-hook 'eshell-mode-hook #'generic-term-init)

  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))

  (use-package minions                    ; A minor-mode menu for the mode line
    :init (minions-mode)
    :config
    (setq
     minions-mode-line-lighter "λ="
     minions-direct '(flycheck-mode)))

  (setq-default indicate-buffer-boundaries 'left)
  (setq-default indicate-empty-lines +1)

  (use-package highlight
    :ensure t
    :pin melpa)

  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))

  (use-package symbol-overlay
    :defer 4
    :bind
    ("M-s h ." . symbol-overlay-put)
    ("M-s h n" . symbol-overlay-jump-next)
    ("M-s h p" . symbol-overlay-jump-prev)
    :hook (prog-mode . symbol-overlay-mode)
    :config
    (setq symbol-overlay-idle-time 0.2))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package rainbow-mode
    :commands rainbow-mode
    :hook (prog-mode . rainbow-mode))

  (use-package visual-fill-column
    :commands visual-fill-column-mode)

  (use-package hide-mode-line-mode
    :commands hide-mode-line-mode)

  (defun set-light-theme ()
    "Set the light theme with some customization if needed."
    (interactive)
    (load-theme 'doom-one-light t))

  (defun set-dark-theme ()
    "Set the dark theme with some customization if needed."
    (interactive)
    (load-theme 'doom-one t))

  (defun theme-switcher ()
    (interactive)
    (let ((current-hour (string-to-number (format-time-string "%H"))))
      (if (and (> current-hour 6) (< current-hour 20))
          (set-light-theme)
        (set-dark-theme))))

  ;; Run at every 3600 seconds, after 0s delay
  (run-with-timer 0 3600 'theme-switcher)

  (provide 'setup-style)
#+end_src
